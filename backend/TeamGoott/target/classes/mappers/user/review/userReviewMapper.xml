<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.mappers.user.review.userReviewMapper">

<select id="getAllrevws" resultType="com.team.goott.user.domain.ReviewDTO">
select * from review where storeId = #{storeId}
order by ${orderBy} LIMIT #{startRow},#{size}
</select>

<select id="getBoardByNo" resultType="com.team.goott.user.domain.ReviewDTO">
select * from review where reviewId= #{reviewId}
</select>
  
<resultMap type="com.team.goott.user.domain.ReviewDTO" id="reviewResultMap">
	<id property="reviewId" column="reviewId"/>
	<result property="storeId" column="storeId"/>
	<result property="reserveId" column="reserveId"/>
	<result property="score" column="score"/>
	<result property="content" column="content"/>
	<result property="createAt" column="createAt"/>
	<collection property="reviewImages" ofType="com.team.goott.user.domain.ReviewImagesDTO">
		<id property="imageId" column="imageId"/>
		<result property="url" column="url"/>
	</collection>
</resultMap>
<select id="getMyReview" resultMap="reviewResultMap">
	SELECT 
	rv.reviewId,
	rv.storeId,
	rv.reserveId,
	rv.score,
	rv.content,
	rv.createAt,
	ri.imageId,
	ri.url
	FROM review rv
	LEFT JOIN reviewImages ri
	ON rv.reviewId = ri.reviewId
	WHERE userId = #{userId}
	ORDER BY rv.createAt DESC
	<if test="startRow != null and size != null">
		LIMIT #{startRow}, #{size}
	</if>
</select>

<insert id="insertReview" useGeneratedKeys="true" keyProperty="reviewId">
insert into review (storeId,userId,reserveId, score,content) values (#{storeId},#{userId},#{reserveId},#{score},#{content})
<selectKey keyProperty="reviewId" resultType="int" order="AFTER">
select last_insert_id()
</selectKey>
</insert>

<delete id="deleteReview">
delete from review where reviewId = #{reviewId}
</delete>

<insert id="insertImgs">
insert into reviewImages(reviewId, url, fileName, fileType) values (#{reviewId},#{url},#{fileName},#{fileType})
</insert>

<select id="getFileByNo" resultType="com.team.goott.user.domain.ReviewImagesDTO">
select * from reviewImages where reviewId = #{reviewId}
</select>

<delete id="deleteFiles">
delete from reviewImages where reviewId = #{reviewId}
</delete>

<update id="updateReview">
update review set score = #{score}, content = #{content} where reviewId = #{reviewId}
</update>

<delete id="deleteImgsById">
delete from reviewImages where imageId = #{imageId}
</delete>

<select id="reserveByUserId" resultType="com.team.goott.user.domain.ReserveDTO">
select * from reserve where userId = #{userId}
</select>

<select id="getUserReviews" resultType="com.team.goott.user.domain.ReviewDTO">
select * from review where userId= #{userId}
</select>

<select id="getReserveByreserveId" resultType="com.team.goott.user.domain.ReserveDTO">
select * from reserve where reserveId = #{reserveId}
</select>

<select id="countImageId" resultType="int">
select count(*) from reviewImages where imageId = #{imageId}
</select>

<update id="updateStatusCode">
update reserve set statusCodeId = #{statusCodeId} where reserveId = #{reserveId}
</update>

<select id="selectUserName" resultType="com.team.goott.user.domain.ReviewDTO">
select name,profileImageUrl from user where userId = #{userId} 
</select>
  
<insert id="setNotification">
	insert into notification(userId , message, storeId, notificationType, reserveId) 
	values(#{userId}, #{message}, #{storeId}, #{notificationType}, #{reserveId})
</insert>

</mapper>