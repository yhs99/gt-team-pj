name: Deploy to EC2 with Maven

on:
  push:
    branches:
      - main

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Create SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/ec2.pem
          chmod 600 ~/ec2.pem

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up JDK 8
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
      - name: Create connection.properties
        env:
          DB_URL: ${{ secrets.DB_HOST }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          S3_ACCESSKEY: ${{ secrets.S3_ACCESSKEY }}
          S3_SECRETKEY: ${{ secrets.S3_SECRETKEY }}
        run: |
          echo "jdbc.driverClassName=com.mysql.cj.jdbc.Driver" > backend/TeamGoott/src/main/resources/connection.properties
          echo "jdbc.url=${DB_URL}" >> backend/TeamGoott/src/main/resources/connection.properties
          echo "jdbc.username=${DB_USERNAME}" >> backend/TeamGoott/src/main/resources/connection.properties
          echo "jdbc.password=${DB_PASSWORD}" >> backend/TeamGoott/src/main/resources/connection.properties
          echo "s3.accessKey=${S3_ACCESSKEY}" > backend/TeamGoott/src/main/resources/connection.properties
          echo "s3.secretKey=${S3_SECRETKEY}" >> backend/TeamGoott/src/main/resources/connection.properties
          echo "s3.region=ap-northeast-2" >> backend/TeamGoott/src/main/resources/connection.properties
          echo "s3.bucketName=goott-bucket" >> backend/TeamGoott/src/main/resources/connection.properties

      - name: Build with Maven
        run: |
          cd backend/TeamGoott
          mvn clean package

      - name: make dir .ssh
        run: |
          mkdir -p ~/.ssh

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
          
      - name: Delete ROOT
        run: |
          ssh -i ~/ec2.pem -o UserKnownHostsFile=~/.ssh/known_hosts -tt ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "sudo rm -rf /opt/tomcat/apache-tomcat-9.0.95/webapps/ROOT.war"  # 기존 파일 삭제
          ssh -i ~/ec2.pem -o UserKnownHostsFile=~/.ssh/known_hosts -tt ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "sudo rm -rf /opt/tomcat/apache-tomcat-9.0.95/webapps/ROOT"  # 기존 파일 삭제
          
      - name: Deploy WAR to EC2
        run: |
          scp -o StrictHostKeyChecking=no ${{ secrets.PROJECT_DIRECTORY }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:/opt/tomcat/apache-tomcat-9.0.95/webapps/
          
      - name: Start Tomcat
        run: |
          ssh -i ~/ec2.pem -o UserKnownHostsFile=~/.ssh/known_hosts -tt ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "sudo systemctl restart tomcat"
  
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Create SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/ec2.pem
          chmod 600 ~/ec2.pem
          
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: make dir .ssh
        run: |
          mkdir -p ~/.ssh

      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts
          
      - name: Install NPM Packages
        run: |
          cd frontend
          npm install
          
      - name: Copy Frontend Files to EC2
        run: |
          rsync -avz --delete -e "ssh -i ~/ec2.pem -o StrictHostKeyChecking=no" frontend/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }}:/opt/frontend/

      - name: Restart Nginx
        run: |
          ssh -i ~/ec2.pem -o UserKnownHostsFile=~/.ssh/known_hosts -tt ${{ secrets.EC2_USER }}@${{ secrets.EC2_IP }} "sudo systemctl restart nginx"
    
